package edu.skku.finalproject.studyhelper.fragment;

import android.content.Context;//
import android.content.Intent;
import android.net.Uri;//
import android.os.Bundle;//
import android.support.v4.app.Fragment;//
import android.support.v4.app.FragmentManager;
import android.support.v7.widget.RecyclerView;//
import android.support.v7.widget.LinearLayoutManager;//
import android.telecom.TelecomManager;
import android.telephony.TelephonyManager;
import android.view.LayoutInflater;//
import android.view.View;//
import android.view.ViewGroup;//
import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Handler;//
import android.os.HardwarePropertiesManager;
import android.os.Message;//
import android.support.annotation.NonNull;//
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;//
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;//
import android.widget.LinearLayout;//
import android.widget.TextView;//
import android.widget.Toast;//

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapsInitializer;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;


import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Calendar;

import edu.skku.finalproject.studyhelper.activity.MainActivity;
import edu.skku.finalproject.studyhelper.dto.MapJsonData;
import edu.skku.finalproject.studyhelper.R;

import edu.skku.finalproject.studyhelper.model.Member;

public class MemberLocationFragment extends Fragment {
    Context mContext;
    SupportMapFragment mapF;
    GoogleMap Mmap;
    RecyclerView recyclerView;
    RecyclerView.Adapter adapter;
    RecyclerView.LayoutManager layoutManager;
    double lat;
    double lon;
    MapJsonData.ResultClass[] mapResults;
    Button bt;
    TextView tv_meetingtime;
    Member ariel = new Member("ariel", "결석", new edu.skku.finalproject.studyhelper.model.Location("종로", "123.123,123.123"),new LatLng(12.1, 135));
    Member brian = new Member("brian", "결석", new edu.skku.finalproject.studyhelper.model.Location("종로", "123.123,123.123"),new LatLng(12.1, 135)) ;
    Member cristina = new Member("cristina", "결석", new edu.skku.finalproject.studyhelper.model.Location("종로", "123.123,123.123"), new LatLng(12.1, 135));

    Member[] member = {ariel, brian, cristina};
    LinearLayout mapLayout;
    int CurrentTimeInt;
    int meetingTimeInt;





    String name = MainActivity.MYNAME;
    String att = "결석";
    LatLng currentLocation;
    Date CurrentTime = new Date();
    SimpleDateFormat timeFormat = new SimpleDateFormat("yyyy.MM.dd hh:mm");
    String meetingTime = "2016.11.02 10:04";
    Date meetingDate;


    public Date meetingDate(String meetingTime){
        try {
            meetingDate = timeFormat.parse(meetingTime);
        } catch (ParseException e) {
            meetingDate = null;
            e.printStackTrace();
        }
        return meetingDate;
    }
    double meet_lat = 37.588072, meet_lon = 126.990980;
    LocationManager locationManager;


    boolean isPaused = false;


    public void updateMapInfo(){
        if(CurrentTimeInt > meetingTimeInt -600){
            MarkerOptions markerOptions = new MarkerOptions();
            for(int i=0; i<member.length;i++) {
                markerOptions.position(member[i].getCurrentLocation()).title(member[i].getName());
            }
            Mmap.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLocation, 15));

        }
        else{
            System.out.println("아직 위치를 찾을 수 없습니다.");
        }
    }




    @Override
    public void onResume() {
        super.onResume();
        isPaused = false;
    }

    @Override
    public void onPause() {
        super.onPause();
        isPaused = true;
    }

    LocationListener locationListener = new LocationListener() {
        @Override
        public void onLocationChanged(Location location) {
            lat = location.getLatitude();
            lon = location.getLongitude();

            if(CurrentTimeInt==meetingTimeInt-600){
                new DbThread().start();


            }

        }

        @Override
        public void onStatusChanged(String s, int i, Bundle bundle) {
        }

        @Override
        public void onProviderEnabled(String s) {
        }

        @Override
        public void onProviderDisabled(String s) {
        }
    };

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {





        meetingDate = meetingDate(meetingTime);
        CurrentTimeInt = (int) CurrentTime.getTime();
        meetingTimeInt = (int) meetingDate.getTime();
        View view = inflater.inflate(R.layout.fragment_member_location, container, false);
        mContext = getActivity().getApplicationContext();

        mapLayout = view.findViewById(R.id.mapLayout);
        mapF = (SupportMapFragment) getFragmentManager().findFragmentById(R.id.mapF);



        bt = view.findViewById(R.id.bt);
        tv_meetingtime = view.findViewById(R.id.tv_meetingtime);
        tv_meetingtime.setText("약속시간: "+ meetingDate);
        new AttThread().start();

        SupportMapFragment mapF = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.mapF);
        mapF.getMapAsync(new OnMapReadyCallback() {
            @Override
            public void onMapReady(GoogleMap googleMap) {
                Mmap = googleMap;
                MarkerOptions markerOptions = new MarkerOptions();
                for(int i=0; i<member.length;i++) {
                    markerOptions.position(member[i].getCurrentLocation()).title(member[i].getName());
                }
                Mmap.moveCamera(CameraUpdateFactory.newLatLngZoom(member[0].getCurrentLocation(), 15));

            }

        });







        bt.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view){
                updateMapInfo();
                if (mapLayout.getVisibility() == View.GONE){
//                    Animation animation = AnimationUtils.loadAnimation(mContext,R.anim.dropdown);
//                    animation.setDuration(500);
//                    mapLayout.setAnimation(animation);
                    mapLayout.setVisibility(View.VISIBLE);


                }else{
//                    Animation animation = AnimationUtils.loadAnimation(mContext,R.anim.riseup);
//                    mapLayout.setAnimation(animation);
                    mapLayout.setVisibility(View.GONE);
                }
            }
        });



        tv_meetingtime = view.findViewById(R.id.tv_meetingtime);
        tv_meetingtime.setText("약속시간: " + meetingDate);


        locationManager = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE);
        boolean canUseLocation = false;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1234);
            } else {
                canUseLocation = true;
            }
        } else {
            canUseLocation = true;
        }

        if (canUseLocation) {
            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 10, locationListener);
            Location lastLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        }

        return view;
    }


    Handler Atthandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            if (!isPaused) {
                switch (msg.what) {
                    case 0: // error
                        att = (String) msg.obj;
                        for (int i = 0; i < member.length; i++) {
                            if (member[i].getName() == name) {
                                member[i].setAtt(att);
                            }
                        }
                        break;
                    case 1:
                        att = (String) msg.obj;
                        for (int i = 0; i < member.length; i++) {
                            if (member[i].getName() == name) {
                                member[i].setAtt(att);
                            }
                        }
                        //디비로 보내기
                        break;
                }

            }

        }

    };


    public class AttThread extends Thread {
        @Override
        public void run() {

            Message msg = new Message();
            while (true) {

                if (CurrentTimeInt == meetingTimeInt) {
                    if (lat - meet_lat >= -10 && lat - meet_lat <= 10) {
                        if (lon - meet_lon >= -10 && lon - meet_lon <= 10) {
                            msg.what = 1;
                            msg.obj = "출석";
                            Atthandler.sendMessage(msg);
                            break;
                        }
                    } else {
                        msg.what = 1;
                        msg.obj = "지각";
                        Atthandler.sendMessage(msg);
                        break;

                    }

                }


            }


        }


    }
    public class DbThread extends Thread{
        @Override
        public void run(){
            LatLng currentLocation = new LatLng(lat, lon);
            //디비로 보내기
        }
    }

}




