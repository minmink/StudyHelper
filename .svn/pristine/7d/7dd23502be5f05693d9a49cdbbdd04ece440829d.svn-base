
package edu.skku.finalproject.studyhelper;

        import android.support.annotation.NonNull;
        import android.support.annotation.Nullable;
        import android.support.v7.app.AppCompatActivity;
        import android.os.Bundle;
        import android.util.Log;
        import android.widget.TextView;

        import com.google.firebase.database.ChildEventListener;
        import com.google.firebase.database.DataSnapshot;
        import com.google.firebase.database.DatabaseError;
        import com.google.firebase.database.DatabaseReference;
        import com.google.firebase.database.FirebaseDatabase;
        import com.google.firebase.database.ValueEventListener;

        import java.lang.reflect.Array;
        import java.util.ArrayList;
        import java.util.Arrays;
        import java.util.List;

public class FirebaseTestActivity extends AppCompatActivity {
//    TextView tvTest;
    /*
        FirebaseDatabase 객체로 database 불러온 후,
        노드 하나하나를 getReference로 불러온다.
        예를 들어, memeber 노드를 불러오고싶다면 DatabaseReference memberRef = database.getReference("member");
        그 후에 DatabaseReference객체에 addValueEventListener 메소드로 맨 처음 불러올 때와 데이터가 변경될 때 호출되는 리스너를 등록한다.
     */
    FirebaseDatabase database = FirebaseDatabase.getInstance();
    DatabaseReference myRef = database.getReference();
    DatabaseReference memberRef = database.getReference("member");
//    List<Member> members = new

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_firebase_test);
//        tvTest = findViewById(R.id.tv_test);
        /*
        멤버 추가
        setMember( 멤버번호, Member객체 );

        Member 객체: 이름, 참석 여부, MemberLocation 객체

        Location 객체: 장소명, 위경도

        스터디 회차 추가
        setStudy( 회차번호, Study 객체);

        Study 객체: 스터디 날짜, StudyLocation객체, Location객체, Member 리스트( Arrays.asList(Member객체1, Member객체2..) 이용 )
         */

        setMember(2, new Member("가나다", "불참" , new Location("혜화","123.21423,2412.213")));
        setStudy(1, new Study("2018-12-22",new Location("종로", "123.123,123.123"), Arrays.asList(new Member("정광현", "불참" , new Location("혜화","123.21423,2412.213")),new Member("정광현", "불참" , new Location("혜화","123.21423,2412.213")))));

        memberRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                Member m = dataSnapshot.getValue(Member.class);
                Log.d("snapshot: ", m.name);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
        // 데이터가 변경될 때와 맨 처음 데이터를 불러들일 때 호출된다.
        myRef.addValueEventListener(new ValueEventListener() {

            @Override           // 데이터 스냅샷은, 현재 상태에서 데이터들을 캡처한 것이다.
            public void onDataChange(DataSnapshot dataSnapshot) {
//                dataSnapshot.getChildren(); // 현재 노드의 자식 노드들 모두가 iterative한 Datasnapshot 객체로 반환된다.
//                Member member = dataSnapshot.getValue(Member.class); // 현재 노드의 값이 Member클래스에 매핑되어 반환된다. 이 경우 member.name처럼 값을 불러올 수 있다.
//                Member member = dataSnapshot.getValue(Member.class);
            }

            @Override
            public void onCancelled(DatabaseError error) {
            }
        });

    }

    public void setMember(int num,Member member){
        myRef.child("member").child(Integer.toString(num)).setValue(member);
    }

    public void setStudy(int number, Study study){
        myRef.child("study").child(Integer.toString(number)).setValue(study);
    }


}
